import { tracked } from 'ripple';
import type { Tracked } from "ripple";

export function isTrackedObject(v: Tracked) {
    return typeof v === 'object' && v !== null && typeof (v.f) === 'number';
}

export function trackProps(v: Record<string|symbol, any>) {
	var isTracked = isTrackedObject(v);

	if (isTracked || typeof v !== 'object' || v === null || Array.isArray(v)) {
		throw new TypeError('Invalid value: expected a non-tracked object');
	}

	var descriptors = Object.getOwnPropertyDescriptors(v);

	return new Proxy(v, {
		get(target, key) {
			if (isTrackedObject(target[key])) {
				return target[key];
			}
			let t = tracked(undefined);
			const exists = !!descriptors[key];
			if (exists) {
				t = Object.defineProperty(t, '__v', descriptors[key]);
			}
			return t;
		}
	});
}