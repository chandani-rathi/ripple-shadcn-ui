import { track } from "ripple"
import type { PropsWithChildren } from "ripple";
import { normalizeStyleObject } from "@ripple-primitives/utils" 

const NODES = [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'audio',
    'button',
    'canvas',
    'cite',
    'code',
    'data',
    'datalist',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hr',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'main',
    'map',
    'mark',
    'menu',
    'meter',
    'nav',
    'ol',
    'output',
    'p',
    'picture',
    'pre',
    'progress',
    'q',
    'rp',
    'rt',
    'ruby',
    's',
    'samp',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'template',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'title',
    'tr',
    'u',
    'ul',
    'video',
] as const;

type Primitives = { [E in (typeof NODES)[number]]: PrimitiveProps<E> };

type PrimitiveProps<T extends object = {}> = PropsWithChildren<{ asChild?: boolean }>

/*
    <Primitive.div />
    <Primitive.button />
*/
export const Primitive = NODES.reduce(
    (primitive, node) => {
        component Node({children, asChild, style, ...nodeProps} : PrimitiveProps){
            let tag = track(node);
            if(asChild) {
                <@children style={normalizeStyleObject(style)} {...@nodeProps} />
            }
            else {
                <@tag style={normalizeStyleObject(style)} {...@nodeProps}>
                    <@children />
                </@tag> 
            }
        }
        return {
            ...primitive, [node]: Node
        }
    }, {} as Primitives
)


const CreateProvider = (providerContext) => {
  component Provider({ children, ...props }) {
    let context = providerContext.get();
    context = {...context, ...props }
    providerContext.set(context);
    <@children />
  }

  return Provider;
}