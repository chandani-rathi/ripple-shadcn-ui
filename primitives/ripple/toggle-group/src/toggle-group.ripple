import { Primitive, trackProps } from "@ripple-primitives/primitive-ui";
import { Toggle } from "@ripple-primitives/toggle";
import { useDirection } from "@ripple-primitives/direction"
import { UseControllableState, ControllableState } from '@ripple-primitives/use-controllable-state';
import { track, effect, Context } from "ripple";
import { RovingFocusGroup, RovingFocusGroupItem, RovingFocusContext } from "@ripple-primitives/roving-focus-group";

const TOGGLE_GROUP_NAME = 'ToggleGroup';
const ToggleGroupContext = new Context({});

export component ToggleGroup(props){
  const { type, ...toggleGroupProps } = trackProps(props);
  const toggleGroupId = Date.now();
  ToggleGroupContext.set({ toggleGroupId, type });

  if (@type === 'single') {
    <ToggleGroupImplSingle {...toggleGroupProps} />;
  }
  else if(@type === 'multiple') {
     <ToggleGroupImplMultiple {...toggleGroupProps} />;
  }
  else {
    <div>
      throw new Error(`Missing prop \`type\` expected on \`${TOGGLE_GROUP_NAME}\``);
    </div>
  }
}

export component ToggleGroupImplSingle(props){
  const {  value: valueProp, defaultValue, onValueChange, children: Children,...toggleGroupSingleProps } = props

  const value = UseControllableState(
		{
			prop: valueProp,
			defaultProp: defaultValue ?? '',
			onChange: @onValueChange,
			caller: TOGGLE_GROUP_NAME,
		},
	);

  const context = ToggleGroupContext.get();
  context.value = track(() => @value ? #[@value]: #[]);
  context.onItemActivate = (v) => {
    @value = v;
  }
  context.onItemDeactivate = (v) => {
    @value = ''
  }
  ToggleGroupContext.set({...context});

  <ToggleGroupImpl {...toggleGroupSingleProps}>
    component children(childProps){
      <@Children {...childProps} />
    }
  </ToggleGroupImpl>
}

component ToggleGroupValueProvider({
  type,
  value,
  onItemActivate,
  onItemDeactivate,
  children
}) {

  const context = {...ToggleGroupContext.get()};
  context.type = type;
  context.value = track(() => value);
  context.onItemActivate = onItemActivate;
  context.onItemDeactivate = onItemDeactivate;
  ToggleGroupContext.set(context);
  
  <@children />
}

export component ToggleGroupImplMultiple(props){
  const {  value: valueProp, defaultValue, onValueChange, children: Children, ...toggleGroupMultipleProps } = props

  const value = UseControllableState(
		{
			prop: valueProp,
			defaultProp: defaultValue ?? [],
			onChange: @onValueChange,
			caller: TOGGLE_GROUP_NAME,
		},
	);

  const handleButtonActivate = (itemValue: string) => {
    @value = [...@value, itemValue];
  }

  const handleButtonDeactivate = (itemValue: string) => {
    @value = @value.filter(value => value !== itemValue)
  }

  <ToggleGroupValueProvider
    type="multiple"
    value={@value}
    onItemActivate={handleButtonActivate}
    onItemDeactivate={handleButtonDeactivate}
  >
    <ToggleGroupImpl {...toggleGroupMultipleProps}>
      component children(childProps){
        <@Children {...childProps} />
      }
    </ToggleGroupImpl>
  </ToggleGroupValueProvider>
}

component ToggleGroupImpl({ 
  disabled = false, 
  rovingFocus = true, 
  orientation, 
  dir, 
  loop = true,
  children: Children,
  ...toggleGroupProps
}){
  const direction = useDirection(dir)
  const commonProps = { role: 'group', dir: direction };
  const context = ToggleGroupContext.get();
  context.disabled = track(() => @disabled);
  context.rovingFocus = track(() => @rovingFocus);
  ToggleGroupContext.set(context);
  if(@rovingFocus) {
    <RovingFocusGroup asChild {orientation} dir={@direction} {@loop} >
      component children(childProps) {
        <Primitive.div {...childProps} {...commonProps} {...toggleGroupProps} >
          component children(childProps2){
            <@Children {...childProps2}/>
          }
        </Primitive.div>
      }
    </RovingFocusGroup>
  }
  else {
    <Primitive.div {...toggleGroupProps} {...commonProps} >
      component children(childProps){
        <@Children {...childProps}/>
      }
    </Primitive.div>
  }
}

/* -------------------------------------------------------------------------------------------------
 * ToggleGroupItem
 * -----------------------------------------------------------------------------------------------*/

const ITEM_NAME = 'ToggleGroupItem';
export component ToggleGroupItem(props){
  const { value, disabled: disabledItem, children: Children, asChild:parentAsChild,  ...itemProps} = trackProps(props);
  const context = ToggleGroupContext.get();
  const pressed = track(() => context.@value.includes(@value));
  const disabled = track(() => context.@disabled || @disabledItem);
  const rovingFocusGroupContext = RovingFocusContext.get();
  if(context.@rovingFocus) {
    <RovingFocusGroupItem asChild focusable={!@disabled} active={@pressed} >
      component children(childProps){
        <ToggleGroupItemImpl asChild={parentAsChild} {@value} {disabled} {@pressed} {...childProps} {...itemProps}>
          component children(childProps2) {
            <@Children {...childProps2} />
          }
        </ToggleGroupItemImpl>
      }
    </RovingFocusGroupItem>
  }
  else {
    <ToggleGroupItemImpl {@value} {...itemProps}  {disabled} {@pressed}>
        component children(childProps) {
          <@Children {...childProps} />
        }
    </ToggleGroupItemImpl>
  }
  
}

component ToggleGroupItemImpl({ value, pressed, ...itemProps }){
  const context = ToggleGroupContext.get();
  const singleProps = { role: 'radio', 'aria-checked': @pressed, 'aria-pressed': undefined };
  const typeProps = @context.type === 'single' ? singleProps : {};
  <Toggle {@pressed} {...itemProps} {...typeProps} 
    onPressedChange={(pressed) => {
      if (pressed) {
        context.onItemActivate(value);
      } else {
        context.onItemDeactivate(value);
      }
    }}
  />
}