import { track } from 'ripple';
import { composeEventHandlers } from '@ripple-primitives/primitive';
import { Primitive, trackProps } from '@ripple-primitives/primitive-ui';
import { UseControllableState } from '@ripple-primitives/use-controllable-state';

const NAME = 'Toggle';

export component Toggle(props) {
	const {
		pressed: pressedProp,
		defaultPressed,
		onPressedChange,
		children: ToggleChildren,
		...buttonProps
	} = trackProps(props);
	
	const pressed = UseControllableState(
		{
			prop: pressedProp,
			defaultProp: defaultPressed ?? false,
			onChange: onPressedChange,
			caller: NAME,
		},
	);

	<Primitive.button
		{...buttonProps}
		type="button"
		aria-pressed={!!@pressed}
		data-state={@pressed ? 'on' : 'off'}
		data-disabled={buttonProps.@disabled ? '' : undefined}
		onClick={composeEventHandlers(buttonProps.@onClick || (() => {}), () => {
			if (!buttonProps.@disabled) {
				@pressed = !@pressed;
			}
		})}
	>
		component children(childProps) {
			<@ToggleChildren {...childProps} />
		}
	</Primitive.button>
}