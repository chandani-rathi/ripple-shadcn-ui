import * as ripple from 'ripple';
import { Toggle }  from "../src/toggle.ripple";
import { axe } from 'vitest-axe';
import userEvent from '@testing-library/user-event';
import { waitFor } from "@testing-library/dom"

const TEXT_CHILD = 'Like';

describe("given a Toggle with text", () => {
	
	beforeEach(() => {
		component Test(){
			<Toggle id="toggle">{TEXT_CHILD}</Toggle>
		}
		render(Test);
	})

	it('should have no accessibility violations', async () => {
		expect(await axe(container)).toHaveNoViolations();
	});

	it('should render with attributes as false/off by default', () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });
		expect(button).toHaveAttribute('aria-pressed', 'false');
		expect(button).toHaveAttribute('data-state', 'off');
	});

	
  it('Click event should change pressed attributes to true/on', async () => {
    const button = container.getByRole('button', { name: TEXT_CHILD });
	// userEvent.click(button);
	button.click()
	ripple.flushSync();
	
	await waitFor(() => {
		expect(button).toHaveAttribute('aria-pressed', 'true');
    	expect(button).toHaveAttribute('data-state', 'on');
	})
	
  });
});

describe('given a Toggle with text and defaultPressed="true"', () => {
	beforeEach(() => {
		component Test(){
			<Toggle defaultPressed>{TEXT_CHILD}</Toggle>
		}
		render(Test);
	});

	it('should render with attributes true/on by default', () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });

		expect(button).toHaveAttribute('aria-pressed', 'true');
		expect(button).toHaveAttribute('data-state', 'on');
	});

	it('Click event should change attributes back to off/false', () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });
		// userEvent.click(button);
		button.click()
		ripple.flushSync();
		
		expect(button).toHaveAttribute('aria-pressed', 'false');
		expect(button).toHaveAttribute('data-state', 'off');
	});
});

describe(`given a Toggle with text and disabled="true"`, () => {
	beforeEach(() => {
		component Test(){
			<Toggle disabled>{TEXT_CHILD}</Toggle>
		}
		render(Test);
	})
	it(`on click the attributes do not change`, () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });
		expect(button).toHaveAttribute('aria-pressed', 'false');
		expect(button).toHaveAttribute('data-state', 'off');
		expect(button).toHaveAttribute('disabled', '');
		// userEvent.click(button);
		button.click();
		expect(button).toHaveAttribute('aria-pressed', 'false');
    	expect(button).toHaveAttribute('data-state', 'off');
	})

})

describe('given a controlled Toggle (with pressed and onPressedChange)', () => {
	const onPressedChangeMock = vi.fn();
	beforeEach(() => {
		component Test(){
			<Toggle pressed onPressedChange={onPressedChangeMock}>{TEXT_CHILD}</Toggle>
		}
		render(Test);
	})
	it('Click event should keep the same attributes, and pass the new state to onPressedChange', () => {
    const button = container.getByRole('button', { name: TEXT_CHILD });

    expect(button).toHaveAttribute('aria-pressed', 'true');
    expect(button).toHaveAttribute('data-state', 'on');

	button.click();

    expect(onPressedChangeMock).toHaveBeenCalledTimes(1);
    expect(onPressedChangeMock).toHaveBeenCalledWith(false);

    // The attributes do not change, they keep the same
    // because it's a controlled component.
    expect(button).toHaveAttribute('aria-pressed', 'true');
    expect(button).toHaveAttribute('data-state', 'on');
  });
})