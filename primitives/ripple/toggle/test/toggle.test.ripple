import * as ripple from 'ripple';
import { Toggle }  from "../src/toggle.ripple";
import { axe } from 'vitest-axe';
import userEvent from '@testing-library/user-event';
import { waitFor } from "@testing-library/dom"

const TEXT_CHILD = 'Like';

describe("given a Toggle with text", () => {
	
	beforeEach(() => {
		component Test(){
			<Toggle id="toggle">{TEXT_CHILD}</Toggle>
		}
		render(Test);
	})

	it('should have no accessibility violations', async () => {
		expect(await axe(container)).toHaveNoViolations();
	});

	it('should render with attributes as false/off by default', () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });
		expect(button).toHaveAttribute('aria-pressed', 'false');
		expect(button).toHaveAttribute('data-state', 'off');
	});

	
  it('Click event should change pressed attributes to true/on', async () => {
    const button = container.getByRole('button', { name: TEXT_CHILD });
	// userEvent.click(button);
	button.click()
	ripple.flushSync();
	container.debug();	
	
	await waitFor(() => {
		console.log("after clicked!", )
	})
	
	expect(button).toHaveAttribute('aria-pressed', 'true');
    expect(button).toHaveAttribute('data-state', 'on');
	
  });
});

describe('given a Toggle with text and defaultPressed="true"', () => {
	beforeEach(() => {
		component Test(){
			<Toggle defaultPressed>{TEXT_CHILD}</Toggle>
		}
		render(Test);
	});

	it('should render with attributes true/on by default', () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });

		expect(button).toHaveAttribute('aria-pressed', 'true');
		expect(button).toHaveAttribute('data-state', 'on');
	});

	it('Click event should change attributes back to off/false', () => {
		const button = container.getByRole('button', { name: TEXT_CHILD });
		// userEvent.click(button);
		button.click()
		ripple.flushSync();
		
		//TO DO - failed
		expect(button).toHaveAttribute('aria-pressed', 'false');
		expect(button).toHaveAttribute('data-state', 'off');
	});
});